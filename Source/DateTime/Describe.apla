('This text contains a description of a set of date manipulation routines',(⎕UCS 13),'written in APL by Davin Church of Creative Software Design.',(⎕UCS 13 13),'These functions are written for use by Dyalog APL v18.0 and make use of the',(⎕UCS 13),'⎕DT and 1200⌶ capabilities available in that version of the interpreter.',(⎕UCS 13),'They are designed to provide additional application-oriented capabilities',(⎕UCS 13),'beyond those supplied by ⎕DT and in some cases will run in earlier versions',(⎕UCS 13),'where ⎕DT is not available.',(⎕UCS 13 13),'All these functions are designed to process integers that contain dates in',(⎕UCS 13),'Julian Day Number form, equivalent to 50∘⎕DT form.  ⎕DT may be used to',(⎕UCS 13),'create values in that form from any other desired structure.  Two functions',(⎕UCS 13),'are also available here to convert between Julian and Gregorian forms as',(⎕UCS 13),'well.  These converters (and most of the other functions) also handle dates',(⎕UCS 13),'outside the range supported by ⎕DT.',(⎕UCS 13 13),'Simple day-based calculations can be performed by simply adding and',(⎕UCS 13),'subtracting constants to the JDN, such as applying 2415019 to convert',(⎕UCS 13),'between a JDN and the sorts of date values used by Microsoft Office for Windows.',(⎕UCS 13),'Routines are provided here to perform calculations on calendar months and',(⎕UCS 13),'years as well as other sorts of complex calendar operations.',(⎕UCS 13 13 13),'The following routines are currently available:',(⎕UCS 13 13),'JD          Convert a calendar date (YYYYMMDD) to a Julian Day Number (JJJJJJJ).',(⎕UCS 13),'GD          Convert a Julian Day Number (JJJJJJJ) to a calendar date (YYYYMMDD).',(⎕UCS 13),'Today       Return today''s date as a Julian Day Number (JJJJJJJ).',(⎕UCS 13),'Now         Return a timestamp, like Today but including a fractional time.',(⎕UCS 13),'DayOfWeek   Return the day of the week (Sun=1 thru Sat=7) of a JDN (JJJJJJJ).',(⎕UCS 13),'DayOfYear   Return the day of the calendar year (1-366) of a JDN (JJJJJJJ).',(⎕UCS 13),'WeekOfYear  Return the week of the calendar year (1-53) of a JDN (JJJJJJJ).',(⎕UCS 13),'IsLeapYear  Is the given year a leap year?',(⎕UCS 13),'Age         Return the calendar age from a JDN (JJJJJJJ) as of today.',(⎕UCS 13),'BeginWeek   Return the JDN of the Sunday on or just before the given JDN.',(⎕UCS 13),'BeginMonth  Return the date of the first of the month of the date given.',(⎕UCS 13),'BeginYear   Return the date of the first of the year of the date given.',(⎕UCS 13),'AddMonth    Return the date that is one (or more) months from the date given.',(⎕UCS 13),'AddYear     Return the date that is one (or more) years from the date given.',(⎕UCS 13),'AddWeekday  Return the JDN of the following week day of the given JDN.',(⎕UCS 13),'AddWorkday  Return a date as in AddWeekday but also skip holidays.',(⎕UCS 13),'ExampleHoliday  For a given date, decide if it is a U.S. national bank holiday.',(⎕UCS 13),'Easter      For a given year, return the JDN date of the Easter holiday.',(⎕UCS 13),'Spell       For a given date or timestamp, spell it out in any specified format.',(⎕UCS 13),'Daylight    Return local Daylight Savings Time rules.',(⎕UCS 13),'Local       Convert a UTC JDN timestamp to a local JDN timestamp.',(⎕UCS 13),'UTC         Convert a local JDN timestamp to a UTC JDN timestamp.',(⎕UCS 13),'TimeZone    Return basic description from the local time zone.',(⎕UCS 13 13),'Most routines will accept an array of any size, shape, or rank and return an',(⎕UCS 13),'array of the same dimensions.  Operations on arrays of dates are fast and',(⎕UCS 13),'encouraged.  All date routines (except JD and GD) use the Julian Day Number',(⎕UCS 13),'style of date for simplicity.  The YYYYMMDD format is primarily used when',(⎕UCS 13),'passing dates to and from other systems.',(⎕UCS 13 13),'Dates in the (calendar) form of YYYYMMDD are single 8-digit numeric values',(⎕UCS 13),'where groups of digits are used to describe the parts of the date.  MM is',(⎕UCS 13),'the month number (01-12) and DD is the day number of the month (01-31).  The',(⎕UCS 13),'year (YYYY) may take on almost any value, positive or negative.  If the year',(⎕UCS 13),'is negative, this is indicated by making the entire date a negative number, but',(⎕UCS 13),'without affecting the month or day digits (i.e. they still appear to read as',(⎕UCS 13),'the correct decimal values).  Negative dates (years) are used to indicate dates',(⎕UCS 13),'prior to 1 A.D.  Since there was no year 0 (A.D. or B.C.), the year number',(⎕UCS 13),'(YYYY) of 0 is used to represent the calendar year 1 B.C. so that years can be',(⎕UCS 13),'consecutive.  A year number (YYYY) of ¯1 is used to represent the year 2 B.C.,',(⎕UCS 13),'and so on.  Dates are using a zero date on the proleptic Julian calendar of',(⎕UCS 13),'January 1, 4713 B.C. (¯47120101), and calculations can be performed on all',(⎕UCS 13),'dates both before and after that starting point.',(⎕UCS 13 13),'Important note:  Dates from 15 Oct 1582 and later are assumed to represent',(⎕UCS 13),'dates in the Gregorian (reform) calendar and dates from 4 Oct 1582 and earlier',(⎕UCS 13),'are assumed to represent dates in the (proleptic) Julian calendar, even those',(⎕UCS 13),'that are prior to the official adoption of the Julian calendar in 46 B.C.',(⎕UCS 13),'Other variations and complications in the use of historical dates (such as',(⎕UCS 13),'those surrounding and immediately following the adoption of the Julian calendar',(⎕UCS 13),'system -- 46 B.C. to 4 A.D., or the variable date of switchover to the',(⎕UCS 13),'Gregorian calendar) are summarily ignored.',(⎕UCS 13 13),'The "Julian Day Number" (also called the Julian Day or JD, but *not* the Julian',(⎕UCS 13),'Date) form of the dates (JJJJJJJ) is the standard way of consistently measuring',(⎕UCS 13),'dates regardless of the local calendar in use at any given time.  Its origin is',(⎕UCS 13),'at (Julian proleptic date) January 1, 4713 B.C. where the JD = 0.  In many',(⎕UCS 13),'Julian Day Number systems (especially those used by astronomers), dates were',(⎕UCS 13),'actually assigned fractional numbers so that a time of day might be so',(⎕UCS 13),'indicated.  In such systems, the whole value of the Julian Day represents noon',(⎕UCS 13),'on that day, so the previous midnight would be .5 days less and the following',(⎕UCS 13),'midnight would be .5 days more.  ⎕DT timestamps follow this convention.  Such',(⎕UCS 13),'fractional day numbers are not supported by most of these routines and all',(⎕UCS 13),'dates should be considered to be the whole number (noontime for astronomers)',(⎕UCS 13),'value for that day.  However, JD and GD have been modified to allow special',(⎕UCS 13),'"timestamp" formats for convenience, and these can accept and produce special',(⎕UCS 13),'fractional-day values which start at *midnight* (and thus are 12 hours',(⎕UCS 13),'different than astronomical/⎕DT day-fractions noted above).',(⎕UCS 13 13),'The conversion routines were modified slightly so that a Julian Day (JJJJJJJ)',(⎕UCS 13),'of zero is returned and accepted when the calendar date (YYYYMMDD) is zero.',(⎕UCS 13),'This is to facilitate the handling of "null" (e.g. empty, undefined) dates by',(⎕UCS 13),'use of the value zero in either format.  Unfortunately, this means that the',(⎕UCS 13),'exact (Julian proleptic) date of January 1, 4713 B.C. (¯47120101) is not',(⎕UCS 13),'fully available for use since it also equates to day number zero.  This is not',(⎕UCS 13),'expected to pose any difficulties to programmers in the real world, however.',(⎕UCS 13 13),'The basis for the date conversion algorithms was derived from a detailed',(⎕UCS 13),'mathematical analysis by Peter Baum in 1998 and additional formulas and',(⎕UCS 13),'algorithms were derived from the current "calendar FAQ".  At that time, Peter''s',(⎕UCS 13),'information was available from his web site at',(⎕UCS 13),'<http://mysite.verizon.net/aesir_research/date/date0.htm> and the FAQ is usually',(⎕UCS 13),'multi-posted to the following Usenet news groups: <sci.astro>, <soc.history>,',(⎕UCS 13),'<sci.answers>, <soc.answers>, and <news.answers>.  Wikipedia also has lots of',(⎕UCS 13),'useful and detailed information available.  Please consult these extensive',(⎕UCS 13),'sources of information for more details on the inner workings of the algorithms',(⎕UCS 13),'and the historical use of calendars through the centuries.',(⎕UCS 13 13),'The syntax of these routines is as follows:',(⎕UCS 13),'              ',(⎕UCS 13),'{JJJJJJJ} ← JD {YYYYMMDD}',(⎕UCS 13),'    Converts a calendar-form date to a serial (Julian) day number.  If YYYYMMDD',(⎕UCS 13),'    is negative, this indicates that the year itself is negative (not affecting',(⎕UCS 13),'    the month or day) and is used to describe a date B.C.  If YYYYMMDD is zero,',(⎕UCS 13),'    then the returned JJJJJJJ result will also be zero to facilitate the',(⎕UCS 13),'    implementation of "null" dates.  While the example format given above is the',(⎕UCS 13),'    primary syntax/usage, alternative syntaxes are also available.  Input dates',(⎕UCS 13),'    may be given in "expanded" (⎕TS-like) format where the dates are provided as',(⎕UCS 13),'    separate year, month, and day numbers, as long as they are nested together',(⎕UCS 13),'    into an enclosed scalar anywhere a simple 8-digit scalar would normally be',(⎕UCS 13),'    expected (e.g. ⊂3↑⎕TS).  Also, a time of day may be included to specify a',(⎕UCS 13),'    "timestamp" value, either by including a decimal fraction on the date',(⎕UCS 13),'    integer with the time in readable form (YYYYMMDD.HHMMSS) or by extending the',(⎕UCS 13),'    "expanded" format to have up to 7 items in the nested vector.  In either',(⎕UCS 13),'    case, the resulting Julian Day Number will no longer be an integer, but',(⎕UCS 13),'    instead will contain the usual day value plus a fractional amount of a day',(⎕UCS 13),'    representing the time of day (since midnight) provided.',(⎕UCS 13 13),'{YYYYMMDD} ← [expand] GD {JJJJJJJ}',(⎕UCS 13),'    Converts a serial day number to a calendar-form date.  If JJJJJJJ is zero,',(⎕UCS 13),'    the the returned YYYYMMDD result will also be zero to facilitate the',(⎕UCS 13),'    implementation of "null" dates.  To further enhance the ability to',(⎕UCS 13),'    interface this with other code and systems, it is also possible to have',(⎕UCS 13),'    the dates returned as nested numeric vectors which are the usual scalar',(⎕UCS 13),'    dates separated into independent year, month, and day values similar',(⎕UCS 13),'    to (⊂3↑⎕TS).  This form of output is produced by specifying a scalar 3 as',(⎕UCS 13),'    the optional left argument to the function.  If a fractional serial day',(⎕UCS 13),'    number is provided, then a fractional result will be returned giving the',(⎕UCS 13),'    time in a readable YYYYMMDD.HHMMSS format.  If full timestamps are desired',(⎕UCS 13),'    in enclosed ⎕TS form, supply a left argument of 7.  (Any number between',(⎕UCS 13),'    1 and 7 may be used instead for shorter nested results if desired.)',(⎕UCS 13 13),'{JJJJJJJ} ← Today',(⎕UCS 13),'    Return the current date (⎕TS) in JJJJJJJ form for use by these routines or',(⎕UCS 13),'    any other process that can use "standard" Julian Day Numbers.',(⎕UCS 13),'    The implementation is simply "JD 100⊥3↑⎕TS".',(⎕UCS 13 13),'{JJJJJJJ.FFFFFFFFF} ← Now',(⎕UCS 13),'    Return the current date and time (⎕TS) in fractional JJJJJJJ.FFFFFF form',(⎕UCS 13),'    for use where a combined timestamp value is preferred.  This is the same as',(⎕UCS 13),'    Today (a Julian Day Number), except that it also contains the current time',(⎕UCS 13),'    with a fractional portion indicating the time of day (e.g. X.0 = midnight,',(⎕UCS 13),'    X.5 = noon, X.75 = 6pm).  This form can be used as a full timestamp and can',(⎕UCS 13),'    be processed directly by routines designed for that.  It is also recognized',(⎕UCS 13),'    by GD (which can then return a fractional result) & Spell.  The date',(⎕UCS 13),'    portion may be extracted with "⌊" and the time portion extracted and',(⎕UCS 13),'    converted to seconds with "86400×1|".  The implementation is simply',(⎕UCS 13),'    "JD ⊂⎕TS".  Note that most of the other functions here do not accept',(⎕UCS 13),'    fractional inputs.',(⎕UCS 13 13),'{dayofweek} ← DayOfWeek {JJJJJJJ}',(⎕UCS 13),'    For any given Julian day number, return the day of the week on which it',(⎕UCS 13),'    falls.  Sunday is given as 1 and Saturday as 7.',(⎕UCS 13 13),'{dayofyear} ← [start←0] DayOfYear {JJJJJJJ}',(⎕UCS 13),'    For any given Julian day number, return the day of that year on which it',(⎕UCS 13),'    falls.  January 1 is given as 1 and December 31 as 365 or 366.',(⎕UCS 13),'    If a year is to be considered to begin on a different day (on March 1st,',(⎕UCS 13),'    or December 25th, or other unusual boundary such as those representing',(⎕UCS 13),'    fiscal tax years), then that month and day (as a 4-digit number: 0301,',(⎕UCS 13),'    1225, etc.) may be provided as a left argument to the routine to logically',(⎕UCS 13),'    shift the notion of the "beginning of the year".',(⎕UCS 13),'    Alternatively, a day-of-week number (1-7) may be specified to indicate that',(⎕UCS 13),'    that day of the first calendar week is to be used as the logical beginning',(⎕UCS 13),'    of the year.  A 0 (the default) indicates the actual calendar year start.',(⎕UCS 13 13),'{weekofyear} ← [start←0] WeekOfYear {JJJJJJJ}',(⎕UCS 13),'    For any given serial day number, return the week of that year on which it',(⎕UCS 13),'    falls.  January 1 would return 1 and December 31 returns 53.',(⎕UCS 13),'    If a year is to be considered to begin on a different day (on March 1st,',(⎕UCS 13),'    or December 25th, or other unusual boundary such as those representing',(⎕UCS 13),'    fiscal tax years), then that month and day (as a 4-digit number: 0301,',(⎕UCS 13),'    1225, etc.) may be provided as a left argument to the routine to logically',(⎕UCS 13),'    shift the notion of the "beginning of the year".',(⎕UCS 13),'    Alternatively, a day-of-week number (1-7) may be specified to indicate that',(⎕UCS 13),'    that day of the first calendar week is to be used as the logical beginning',(⎕UCS 13),'    of the year.  A 0 (the default) indicates the actual calendar year start.',(⎕UCS 13 13),'{isLeap} ← IsLeapYear  {YYYY}',(⎕UCS 13),'    For any given year, return a 1 if it is a leap year or a 0 if not.',(⎕UCS 13 13),'{ageinyears} ← [today←Today] Age {JJJJJJJ}',(⎕UCS 13),'    For a given "starting" date, return a calendar age (in calendar years and',(⎕UCS 13),'    fractions thereof) that have elapsed from that date until today (or other',(⎕UCS 13),'    specified "ending" date in JJJJJJJ format that is supplied as the left',(⎕UCS 13),'    argument).  Fractional years are computed by counting days between the last',(⎕UCS 13),'    "birthday" and the next, and thus there may not always be exact half and',(⎕UCS 13),'    quarter years for some dates.  Previous, next, and nearest whole ages may',(⎕UCS 13),'    be extracted by using floor (⌊), ceiling (⌈), and round (⌊.5+),',(⎕UCS 13),'    respectively.',(⎕UCS 13 13),'{JJJJJJJ} ← [start←1] BeginWeek {JJJJJJJ}',(⎕UCS 13),'    For a given date, return the date of the first day (Sunday) of the week',(⎕UCS 13),'    containing that date (i.e. the Sunday on or immediately preceeding the',(⎕UCS 13),'    date given).  If a week is considered to begin on a different day (on',(⎕UCS 13),'    Monday or Saturday for example), then that day number (2, 7, etc.) may',(⎕UCS 13),'    be provided as a left argument to the routine to logically shift the',(⎕UCS 13),'    notion of the "beginning of the week".',(⎕UCS 13 13),'{JJJJJJJ} ← [start←1] BeginMonth {JJJJJJJ}',(⎕UCS 13),'    For a given date, return the date of the first day of the calendar month',(⎕UCS 13),'    containing that date.  If a month is to be considered to begin on a',(⎕UCS 13),'    different day (on the 5th, or the 25th, or other unusual boundary), then',(⎕UCS 13),'    that day number (5, 25, etc.) may be provided as a left argument to the',(⎕UCS 13),'    routine to logically shift the notion of the "beginning of the month".',(⎕UCS 13 13),'{JJJJJJJ} ← [start←0] BeginYear {JJJJJJJ}',(⎕UCS 13),'    For a given date, return the date of the first day of the calendar year',(⎕UCS 13),'    containing that date.  If a year is to be considered to begin on a',(⎕UCS 13),'    different day (on March 1st, or December 25th, or other unusual boundary',(⎕UCS 13),'    such as those representing fiscal tax years), then that month and day',(⎕UCS 13),'    (as a 4-digit number: 0301, 1225, etc.) may be provided as a left argument',(⎕UCS 13),'    to the routine to logically shift the notion of the "beginning of the year".',(⎕UCS 13),'    Alternatively, a day-of-week number (1-7) may be specified to indicate that',(⎕UCS 13),'    that day of the first calendar week is to be used as the logical beginning',(⎕UCS 13),'    of the year.  A 0 (the default) indicates the actual calendar year start.',(⎕UCS 13 13),'{JJJJJJJ} ← [months←1] AddMonth {JJJJJJJ}',(⎕UCS 13),'    Add one calendar month to the date given and return its date.  Zero, or',(⎕UCS 13),'    more than one month may be added, or one or more months may be subtracted,',(⎕UCS 13),'    by giving the routine a left argument specifying the number of months to',(⎕UCS 13),'    add (subtract if negative).  If the day of the month (e.g. 31st) is not',(⎕UCS 13),'    part of the following month (e.g. April), then the first legal day',(⎕UCS 13),'    following it is returned instead (e.g. May 1st).',(⎕UCS 13 13),'{JJJJJJJ} ← [years←1] AddYear {JJJJJJJ}',(⎕UCS 13),'    Add one calendar year to the date given and return its date.  Zero, or',(⎕UCS 13),'    more than one year may be added, or one or more years may be subtracted, by',(⎕UCS 13),'    giving the routine a left argument specifying the number of years to add',(⎕UCS 13),'    (subtract if negative).  If the day of the year (e.g. Feb 29th in a leap',(⎕UCS 13),'    year) is not part of the resulting year (e.g. it is not a leap year), then',(⎕UCS 13),'    the first legal day following it is returned instead (e.g. March 1st).',(⎕UCS 13 13),'{JJJJJJJ} ← [weekdays←1] AddWeekday {JJJJJJJ}',(⎕UCS 13),'    Add one week day (Monday-Friday) to the date given and return its date.',(⎕UCS 13),'    Zero, or more than one week day may be added, or one or more week days may',(⎕UCS 13),'    be subtracted, by giving the routine a left argument specifying the number',(⎕UCS 13),'    of week days to add (subtract if negative).  If the starting date is not a',(⎕UCS 13),'    week day, then the starting date is shifted forward to Monday before',(⎕UCS 13),'    counting begins.',(⎕UCS 13 13),'{JJJJJJJ} ← [workdays←1] {holidayfilter} AddWorkday {JJJJJJJ}',(⎕UCS 13),'    Add one non-holiday week day to the date given and return its date.',(⎕UCS 13),'    Zero or more work days may be added, or one or more work days may be',(⎕UCS 13),'    subtracted, by giving the routine a left argument specifying the number',(⎕UCS 13),'    of work days to add (subtract if negative).  If the starting date is not a',(⎕UCS 13),'    work day, then the starting date is shifted forward to the next legal work',(⎕UCS 13),'    day before counting begins.',(⎕UCS 13 13),'    This routine is identical to the AddWeekday function except that it skips',(⎕UCS 13),'    over holidays as well as weekends.  This is an operator instead of a',(⎕UCS 13),'    function and it takes as its required left operand a function that',(⎕UCS 13),'    determines whether or not a provided Julian day is to be considered a',(⎕UCS 13),'    holiday or not.  For each argument date it should return a 1 (for a',(⎕UCS 13),'    holiday) or a 0 (for a work day).  The included function ExampleHoliday',(⎕UCS 13),'    is an example of this sort of operand and reports official U.S. banking',(⎕UCS 13),'    holidays.',(⎕UCS 13 13),'{isholiday} ← ExampleHoliday {JJJJJJJ}',(⎕UCS 13),'    For use as an operand to AddWorkday, an example for determining holidays.',(⎕UCS 13),'    Return a 1 if the given date is a recognized U.S. national banking holiday',(⎕UCS 13),'    or a 0 otherwise.  The following holidays are recognized (on date',(⎕UCS 13),'    observed):',(⎕UCS 13),'        New Years Day       Independence Day    Thanksgiving',(⎕UCS 13),'        MLK''s Birthday      Labor Day           Christmas',(⎕UCS 13),'        President''s Day     Columbus Day',(⎕UCS 13),'        Memorial Day        Veterans Day',(⎕UCS 13 13),'{JJJJJJJ} ← Easter {YYYY}',(⎕UCS 13),'    Return the date that Easter falls on in a given year.  This is a difficult',(⎕UCS 13),'    calculation.  The rule used is:  Easter Sunday is the first Sunday after',(⎕UCS 13),'    the ecclesiastical full moon on or after the ecclesiastical vernal equinox.',(⎕UCS 13),'    The ecclesiastical vernal equinox is always March 21st.  The astronomical',(⎕UCS 13),'    vernal equinox may actually occur on the 19th or 20th and the',(⎕UCS 13),'    ecclesiastical full moon may differ from the actual astronomical full moon',(⎕UCS 13),'    by a day either way.  There are also variances to take into account for',(⎕UCS 13),'    effective longitude and the effects of the international date line.  The',(⎕UCS 13),'    ecclesiastical rules define how these effects are all handled.  This',(⎕UCS 13),'    function uses the above rule for Gregorian calendar dates (after 1582) and',(⎕UCS 13),'    a simpler calculation for older Julian calendar dates (before 1583).',(⎕UCS 13 13),'{text} ← {pattern} Spell {JJJJJJJ}',(⎕UCS 13),'    Format a given date or timestamp as text.  The format to be used is',(⎕UCS 13),'    specified by use of a pattern phrase provided as the left argument.  This',(⎕UCS 13),'    is a cover function that calls the system facility 1200⌶ and the pattern',(⎕UCS 13),'    to be provided is defined by that facility.  Timestamps to be formatted',(⎕UCS 13),'    must fall within the range limits set by 1200⌶ and ⎕DT.  Examples include:',(⎕UCS 13),'        MMM D, YYYY',(⎕UCS 13),'        YYYY-MM-DD',(⎕UCS 13),'        MM/DD/YY',(⎕UCS 13),'        t:mmp "on" Dddd, Mmmm Doo, YYYY',(⎕UCS 13 13),'    Formatted text is returned as a variable-length character vector.  A vector',(⎕UCS 13),'    (or matrix) of timestamps is returned as a vector (or matrix) of character',(⎕UCS 13),'    vectors.  However, a scalar (not a 1⍴ vector) timestamp value is returned',(⎕UCS 13),'    as an unnested character vector for convenience.',(⎕UCS 13),'    A "null" timestamp (Julian Day Number = 0.0) or a value of ⎕NULL is',(⎕UCS 13),'    formatted as an empty character vector (regardless of the pattern format',(⎕UCS 13),'    requested) to conveniently deal with "missing" or "undefined" timestamps.',(⎕UCS 13 13),'{DST} ← Daylight {YYYY}',(⎕UCS 13),'    Return Daylight Savings Time rules for the specified year(s) in the local',(⎕UCS 13),'    time zone.  The result is in the same shape as the argument, but with each',(⎕UCS 13),'    item being nested and containing three numeric values for that year:',(⎕UCS 13),'        [1] Number of hours to add to the time zone during DST',(⎕UCS 13),'        [2] The timestamp when DST begins in that year',(⎕UCS 13),'        [3] The timestamp when DST ends in that year',(⎕UCS 13),'    If the argument is a scalar (not a 1⍴ vector) then the result is returned',(⎕UCS 13),'    unnested for convenience.',(⎕UCS 13 13),'{JJJJJJJ.FFFFFFFFF} ← Local {JJJJJJJ.FFFFFFFFF}',(⎕UCS 13),'    Given a UTC (Universal Time) timestamp in JDN form, convert it to a local',(⎕UCS 13),'    timezone timestamp in similar form.  This conversion process respects any',(⎕UCS 13),'    Daylight Savings Time adjustment that was in effect on that date.',(⎕UCS 13 13),'{JJJJJJJ.FFFFFFFFF} ← UTC {JJJJJJJ.FFFFFFFFF}',(⎕UCS 13),'    Given a local timestamp in JDN form, convert it to a UTC (Universal Time)',(⎕UCS 13),'    timezone timestamp in similar form.  This conversion process respects any',(⎕UCS 13),'    Daylight Savings Time adjustment that was in effect on that date.',(⎕UCS 13 13),'{tz} ← TimeZone',(⎕UCS 13),'    Return static information about the local time zone.',(⎕UCS 13),'    [1] ← Number of standard-time hours offset from UTC (Univeral Time)',(⎕UCS 13),'    [2] ← Name of time zone',(⎕UCS 13),'    [3] ← Descriptive title of time zone',(⎕UCS 13),'    [4] ← Title of standard time zone',(⎕UCS 13),'    [5] ← Title of daylight savings time zone',(⎕UCS 13 13 13 13),'*** Examples of application use ***',(⎕UCS 13 13),'    Today+7',(⎕UCS 13),'A week from today.',(⎕UCS 13 13),'    14 ExampleHoliday AddWorkday ⍵',(⎕UCS 13),'14 working days from a starting date.',(⎕UCS 13 13),'    ¯1+AddMonth BeginMonth ⍵',(⎕UCS 13),'Find the last day of the month.',(⎕UCS 13 13),'    6 BeginWeek ⍵',(⎕UCS 13),'Find the most-recent Friday.',(⎕UCS 13 13),'    2 BeginWeek 7+AddMonth BeginMonth ⍵',(⎕UCS 13),'The first Monday of next month.',(⎕UCS 13 13),'    ¯3 ExampleHoliday AddWorkday AddMonth BeginMonth ⍵',(⎕UCS 13),'The last day of the month a shipment could be sent to arrive by the first of',(⎕UCS 13),'next month, assuming it takes 3 working days to arrive.',(⎕UCS 13 13),'    2415019+⍵',(⎕UCS 13),'Convert a date-value from Microsoft Excel into this notation.',(⎕UCS 13 13),'    2 BeginWeek 7+BeginYear ⍵',(⎕UCS 13),'The first Monday of the year.',(⎕UCS 13 13),'    6 BeginWeek ¯8+AddMonth BeginMonth ⍵',(⎕UCS 13),'The next-to-last Friday of the month.',(⎕UCS 13 13),'    WW {⍵+7×(⍺=5)∧=/BeginMonth ⍵+0 7} DOW BeginWeek JD⊂YYYY,MM,7×4⌊WW',(⎕UCS 13),'Compute the date from a year, month, week (up to 5), and day-of-week.',(⎕UCS 13 13),'    BeginWeek 7+AddMonth BeginMonth ⍵',(⎕UCS 13),'The first Sunday of the following month.',(⎕UCS 13))
